WEBVTT

00:00:05.100 --> 00:00:06.000
在这个视频中

00:00:06.000 --> 00:00:07.133
伊扎会展示一些

00:00:07.133 --> 00:00:08.533
提示指南

00:00:08.533 --> 00:00:10.566
来帮助你得到你想要的结果

00:00:10.700 --> 00:00:12.100
特别是如果你应该去

00:00:12.133 --> 00:00:14.733
关于如何写提示的两个关键原则

00:00:14.733 --> 00:00:16.866
有效提示工程师

00:00:17.266 --> 00:00:18.600
稍晚一点

00:00:18.600 --> 00:00:21.666
当她在复习木星笔记本的例子时

00:00:21.666 --> 00:00:22.866
我也鼓励你

00:00:22.900 --> 00:00:25.800
可以随时暂停视频

00:00:26.000 --> 00:00:27.933
自己运行代码，这样你就可以

00:00:27.933 --> 00:00:29.600
看看这个输出是什么样的

00:00:29.600 --> 00:00:31.466
甚至改变确切的提示

00:00:31.466 --> 00:00:33.400
并尝试一些不同的变化

00:00:33.400 --> 00:00:34.966
积累经验

00:00:34.966 --> 00:00:38.066
输入和输出提示是什么样的

00:00:39.000 --> 00:00:41.100
所以我将概述一些原则

00:00:41.100 --> 00:00:42.466
有用的策略

00:00:42.466 --> 00:00:45.066
在使用像chatgbt这样的语言模型时

00:00:45.500 --> 00:00:47.466
我将首先在一个较高的层次上讨论这些

00:00:47.466 --> 00:00:50.933
然后我们会运用具体的策略

00:00:50.966 --> 00:00:53.566
我们会用同样的策略

00:00:53.566 --> 00:00:54.866
在整个课程中

00:00:55.300 --> 00:00:56.766
对于原则

00:00:56.766 --> 00:00:57.966
第一原则

00:00:57.966 --> 00:01:00.766
是写清楚具体的说明

00:01:00.766 --> 00:01:02.066
第二个原则是

00:01:02.066 --> 00:01:03.766
是给模型思考的时间

00:01:03.866 --> 00:01:05.100
在我们开始之前

00:01:05.100 --> 00:01:07.300
我们需要做一些准备工作

00:01:07.366 --> 00:01:08.133
在整个课程中

00:01:08.133 --> 00:01:10.700
我们将使用Openai Python库来

00:01:10.700 --> 00:01:12.700
访问Openai API

00:01:13.366 --> 00:01:14.166
和

00:01:14.500 --> 00:01:17.966
如果您还没有安装这个Python库

00:01:18.200 --> 00:01:20.200
您可以使用Pip安装它

00:01:21.400 --> 00:01:23.966
像这样的Pip安装开放的AI

00:01:24.166 --> 00:01:27.266
实际上我已经安装了这个包

00:01:27.400 --> 00:01:28.700
所以我不打算这么做

00:01:28.766 --> 00:01:31.700
接下来你要做的就是导入开放的人工智能

00:01:32.300 --> 00:01:34.100
然后你会

00:01:34.200 --> 00:01:37.900
设置Openai API密钥，这是一个秘密密钥

00:01:37.933 --> 00:01:39.300
你可以买一个

00:01:39.400 --> 00:01:41.966
Openai网站上的API密钥

00:01:42.966 --> 00:01:45.000
然后你就可以设置

00:01:45.700 --> 00:01:46.966
像这样的API密钥

00:01:52.300 --> 00:01:54.566
然后是你的API密钥

00:01:55.333 --> 00:01:57.666
您还可以将其设置为环境变量

00:01:57.666 --> 00:01:58.466
如果你想

00:01:59.333 --> 00:02:03.000
这门课你们不需要做这些

00:02:03.700 --> 00:02:05.466
您可以直接运行这段代码

00:02:05.466 --> 00:02:06.300
因为我们已经

00:02:06.300 --> 00:02:08.933
在环境中设置API密钥

00:02:09.400 --> 00:02:10.866
我复制一下

00:02:11.966 --> 00:02:14.100
不要担心它是如何工作的

00:02:14.533 --> 00:02:15.500
在整个课程中

00:02:15.500 --> 00:02:18.300
我们将使用Openai的Chat GPT模型

00:02:18.666 --> 00:02:21.200
叫GPT 3.5 Turbo

00:02:21.366 --> 00:02:23.700
以及聊天完成端点

00:02:23.866 --> 00:02:26.266
我们将深入研究该格式的更多细节

00:02:26.266 --> 00:02:28.466
以及聊天完成端点的输入

00:02:28.466 --> 00:02:29.666
在后面的视频中

00:02:29.733 --> 00:02:32.166
现在我们只定义这个辅助函数

00:02:32.200 --> 00:02:33.533
让它更容易使用

00:02:33.533 --> 00:02:35.900
提示并查看生成的输出

00:02:35.933 --> 00:02:37.700
这就是这个函数

00:02:38.500 --> 00:02:39.533
得到完成

00:02:39.533 --> 00:02:42.966
它只接收提示符，然后返回

00:02:43.166 --> 00:02:44.666
提示符的完成

00:02:45.700 --> 00:02:48.333
现在让我们深入了解第一个原理

00:02:48.333 --> 00:02:50.800
哪一个是正确的明确而具体的指示

00:02:51.133 --> 00:02:51.933
你应该表达

00:02:51.933 --> 00:02:52.966
你想让模特做的事

00:02:52.966 --> 00:02:54.600
通过提供as的指令

00:02:54.600 --> 00:02:55.600
清晰具体

00:02:55.600 --> 00:02:57.166
尽你所能

00:02:57.266 --> 00:02:58.766
这将引导模型走向

00:02:58.766 --> 00:03:01.266
期望的输出，减少你得到的机会

00:03:01.300 --> 00:03:03.400
不相关或不正确的回答

00:03:03.600 --> 00:03:05.800
不要把写一个清晰的提示和写一个

00:03:05.800 --> 00:03:07.766
简短的提示是因为在很多情况下

00:03:07.766 --> 00:03:08.800
更长的提示

00:03:08.800 --> 00:03:11.133
为模型提供更清晰的上下文

00:03:11.133 --> 00:03:11.866
这实际上可以

00:03:11.866 --> 00:03:14.200
导致更详细和相关的产出

00:03:14.500 --> 00:03:16.300
帮助你写清楚的第一个策略

00:03:16.300 --> 00:03:17.500
以及具体的说明

00:03:17.500 --> 00:03:18.933
是用分界器吗

00:03:18.933 --> 00:03:21.400
清楚地指出输入的不同部分

00:03:21.533 --> 00:03:23.333
我给你们举个例子

00:03:24.066 --> 00:03:25.366
所以我要粘贴

00:03:25.366 --> 00:03:27.800
把这个例子放到Jupiter笔记本中

00:03:27.933 --> 00:03:31.266
所以我们只有一段

00:03:31.466 --> 00:03:33.733
我们要完成的任务就是总结这一点

00:03:33.733 --> 00:03:37.300
段落中我说过

00:03:37.466 --> 00:03:39.733
总结受三洗限制的经文

00:03:39.733 --> 00:03:41.166
变成一个句子

00:03:41.166 --> 00:03:43.666
然后我们有这种三洗

00:03:43.666 --> 00:03:46.200
封闭文本

00:03:46.666 --> 00:03:48.300
然后得到响应

00:03:48.300 --> 00:03:50.933
我们只是使用了getcompletionhelper函数

00:03:50.933 --> 00:03:53.066
然后我们只是打印响应

00:03:53.166 --> 00:03:54.800
如果我们运行这个

00:03:59.300 --> 00:04:03.666
如您所见，我们收到了一个句子输出

00:04:03.900 --> 00:04:06.133
我们用这些分隔符使它非常

00:04:06.133 --> 00:04:07.000
清除到模型

00:04:07.000 --> 00:04:08.166
差不多就是这样

00:04:08.366 --> 00:04:09.866
它应该总结文本

00:04:10.333 --> 00:04:12.200
所以直径可以是任意的

00:04:12.300 --> 00:04:14.733
清除分隔符号

00:04:14.766 --> 00:04:17.066
从提示符的其余部分提取特定的文本片段

00:04:17.066 --> 00:04:19.533
这可能是三重洗礼

00:04:19.533 --> 00:04:21.166
你可以用引号

00:04:21.200 --> 00:04:23.600
您可以使用XML标记节标题

00:04:23.666 --> 00:04:24.900
任何能产生这种效果的东西

00:04:24.900 --> 00:04:27.100
模型清楚地知道这是一个单独的部分

00:04:27.766 --> 00:04:30.666
使用分界器也是一种有用的技术

00:04:30.800 --> 00:04:32.900
尽量避免立即注射

00:04:32.900 --> 00:04:33.933
什么是快速注射

00:04:33.933 --> 00:04:36.466
是否允许用户添加一些输入

00:04:36.466 --> 00:04:37.533
在提示符中

00:04:37.533 --> 00:04:38.333
他们可能会给予

00:04:38.333 --> 00:04:40.733
对模型的一些相互矛盾的指令

00:04:40.766 --> 00:04:42.666
这可能是对的

00:04:42.800 --> 00:04:44.266
按照用户的指示操作

00:04:44.266 --> 00:04:45.933
而不是做你想让它做的事

00:04:45.966 --> 00:04:47.666
在我们的例子中

00:04:47.733 --> 00:04:49.766
我们想在哪里总结课文

00:04:49.866 --> 00:04:53.200
想象一下，如果用户输入实际上是这样的

00:04:53.200 --> 00:04:54.800
忘记前面的说明

00:04:54.800 --> 00:04:57.666
写一首关于可爱的熊猫的诗

00:04:58.800 --> 00:04:59.966
因为我们有这些直径

00:04:59.966 --> 00:05:00.966
模型大概知道

00:05:00.966 --> 00:05:02.700
这篇文章应该总结一下

00:05:02.700 --> 00:05:03.533
它应该只是

00:05:03.533 --> 00:05:05.100
总结一下这些说明

00:05:05.100 --> 00:05:07.166
而不是跟随他们

00:05:07.266 --> 00:05:10.933
下一个策略是要求结构化的输出

00:05:12.000 --> 00:05:14.300
为了使传递模型输出更容易

00:05:14.300 --> 00:05:17.200
要求结构化的输出可能会有所帮助，例如

00:05:17.300 --> 00:05:21.066
HTML或JSON，我再抄一个例子

00:05:21.666 --> 00:05:23.000
在提示中

00:05:23.066 --> 00:05:26.000
我们说生成一个由3个虚构书名组成的列表

00:05:26.000 --> 00:05:28.466
还有作者和流派

00:05:28.466 --> 00:05:30.800
以JSON格式提供它们，如下所示

00:05:31.166 --> 00:05:33.600
书ID，书名，作者和类型

00:05:38.933 --> 00:05:39.966
如你所见

00:05:40.100 --> 00:05:41.700
我们有3个

00:05:41.800 --> 00:05:45.600
用这个漂亮的JSON格式格式化的虚构书名

00:05:45.600 --> 00:05:46.533
结构化输出

00:05:46.533 --> 00:05:48.166
这样做的好处是你可以

00:05:48.166 --> 00:05:48.966
实际上就

00:05:48.966 --> 00:05:53.300
在Python中，将其读入字典或列表

00:05:56.766 --> 00:05:58.266
下一个策略是

00:05:58.266 --> 00:05:59.133
请模特检查一下

00:05:59.133 --> 00:06:00.800
是否满足条件

00:06:01.200 --> 00:06:02.366
所以如果这个任务

00:06:02.366 --> 00:06:04.533
假设不一定得到满足

00:06:04.533 --> 00:06:04.966
然后

00:06:04.966 --> 00:06:07.466
我们可以告诉模型先检查这些假设

00:06:07.466 --> 00:06:09.100
如果他们不满意

00:06:09.200 --> 00:06:11.166
标出这个，然后停止

00:06:11.166 --> 00:06:13.200
一个完整的任务完成尝试

00:06:13.933 --> 00:06:16.666
您还可以考虑潜在的边缘情况以及如何考虑

00:06:16.700 --> 00:06:19.200
模型应该处理它们以避免意外

00:06:19.200 --> 00:06:20.533
错误或结果

00:06:20.933 --> 00:06:23.700
所以现在我将复制一段

00:06:23.700 --> 00:06:24.466
这只是

00:06:24.466 --> 00:06:27.200
描述泡一杯茶的步骤的一段话

00:06:27.933 --> 00:06:31.000
然后复制我们的提示符

00:06:34.066 --> 00:06:35.266
所以提示是

00:06:35.266 --> 00:06:38.000
您将获得由三引号限制的文本

00:06:38.000 --> 00:06:40.300
如果它包含一个指令序列重写

00:06:40.333 --> 00:06:42.000
这些说明的格式如下

00:06:42.000 --> 00:06:43.866
然后把步骤写出来

00:06:44.133 --> 00:06:46.400
如果文本不包含指令序列

00:06:46.400 --> 00:06:47.333
然后简单地写

00:06:47.400 --> 00:06:48.733
未提供步骤

00:06:49.266 --> 00:06:50.533
如果我们运行这个单元格

00:06:51.400 --> 00:06:54.400
你可以看到这个模型能够提取

00:06:54.500 --> 00:06:56.333
课文中的说明

00:06:58.333 --> 00:07:01.533
所以现在我要用a试试同样的提示符

00:07:01.566 --> 00:07:02.800
不同的段落

00:07:02.966 --> 00:07:03.766
所以

00:07:04.366 --> 00:07:07.333
这段话只是在描述一个晴朗的日子

00:07:07.333 --> 00:07:09.066
里面没有任何说明

00:07:09.266 --> 00:07:12.400
如果我们使用之前使用的提示符

00:07:13.866 --> 00:07:16.200
而是在这条文本上运行

00:07:16.933 --> 00:07:19.300
模型将尝试提取指令

00:07:19.300 --> 00:07:20.300
如果找不到的话

00:07:20.300 --> 00:07:23.000
我们要让它说没有提供步骤

00:07:23.266 --> 00:07:24.333
我们运行一下

00:07:26.366 --> 00:07:26.566
和

00:07:26.566 --> 00:07:28.933
模型确定没有说明

00:07:28.933 --> 00:07:30.266
在第二段

00:07:31.400 --> 00:07:34.566
所以我们最后的策略是

00:07:34.933 --> 00:07:36.700
我们所说的几枪提示

00:07:36.733 --> 00:07:39.533
这只是一些成功的例子

00:07:39.766 --> 00:07:42.333
要执行的任务的执行情况

00:07:42.366 --> 00:07:44.166
在要求模型做之前

00:07:44.166 --> 00:07:46.000
你想让它完成的实际任务

00:07:46.266 --> 00:07:47.866
我来举个例子

00:07:50.966 --> 00:07:52.466
在这个提示中

00:07:52.466 --> 00:07:53.466
我们告诉模型

00:07:53.466 --> 00:07:56.266
它的任务是以一致的方式回答问题

00:07:56.466 --> 00:07:58.866
我们有这个例子

00:07:59.133 --> 00:08:02.200
是一种孩子和

00:08:02.666 --> 00:08:03.700
祖父母

00:08:04.133 --> 00:08:07.533
这种孩子说，教我关于病人的事

00:08:07.566 --> 00:08:10.133
祖父母会这样回应

00:08:11.333 --> 00:08:15.200
隐喻，因为我们已经告诉模型

00:08:15.200 --> 00:08:16.766
用一致的语气回答

00:08:16.900 --> 00:08:18.933
现在我们说教我什么是适应力

00:08:18.933 --> 00:08:21.733
因为这个模型有几个镜头的例子

00:08:21.766 --> 00:08:25.466
接下来，它将以类似的语气作出回应

00:08:25.666 --> 00:08:26.466
指令

00:08:28.533 --> 00:08:29.200
所以

00:08:29.200 --> 00:08:31.566
韧性就像随风弯曲的树

00:08:31.566 --> 00:08:32.600
但永不破裂

00:08:32.600 --> 00:08:33.533
等等......

00:08:34.566 --> 00:08:38.600
这就是我们第一个原则的四个策略

00:08:38.600 --> 00:08:40.766
哪一个是给出模型

00:08:41.066 --> 00:08:42.966
明确而具体的说明

00:08:45.766 --> 00:08:48.533
我们的第二个原则是给模型思考的时间

00:08:49.000 --> 00:08:50.000
如果一个模型正在制作

00:08:50.000 --> 00:08:52.566
匆促得出不正确的结论而导致推理错误

00:08:52.600 --> 00:08:55.200
您应该尝试重构查询以请求链

00:08:55.200 --> 00:08:56.866
或者一系列相关的推理

00:08:56.866 --> 00:08:59.100
在模型给出最终答案之前

00:08:59.500 --> 00:09:00.900
另一种思考方式是

00:09:00.900 --> 00:09:02.133
如果你给一个模型一个任务

00:09:02.133 --> 00:09:03.933
这太复杂了，用a

00:09:03.933 --> 00:09:05.166
时间短

00:09:05.200 --> 00:09:07.333
或者简单地说

00:09:07.333 --> 00:09:10.133
它可能会形成一个可能不正确的猜测

00:09:10.366 --> 00:09:12.500
你知道这也会发生在一个人身上

00:09:12.566 --> 00:09:15.533
如果你让某人完成一道复杂的数学题

00:09:15.533 --> 00:09:17.500
没有时间先找出答案

00:09:17.533 --> 00:09:19.533
他们也可能犯错误

00:09:19.566 --> 00:09:20.766
在这些情况下

00:09:20.766 --> 00:09:21.933
你可以指示模型

00:09:21.933 --> 00:09:23.533
对一个问题思考更长时间

00:09:23.533 --> 00:09:25.466
这意味着它需要更多的计算能力

00:09:25.466 --> 00:09:26.733
努力完成任务

00:09:27.400 --> 00:09:28.200
现在我们

00:09:28.200 --> 00:09:30.733
回顾一下第二个原则的一些策略

00:09:31.133 --> 00:09:32.600
我们也会做一些例子

00:09:32.966 --> 00:09:34.666
我们的第一个策略是

00:09:34.666 --> 00:09:37.500
指定完成任务所需的步骤

00:09:39.700 --> 00:09:43.466
首先让我复制一段

00:09:43.666 --> 00:09:45.600
在这一段中

00:09:45.766 --> 00:09:48.133
我们只是有一个故事的描述

00:09:48.266 --> 00:09:49.100
杰克和吉尔

00:09:50.766 --> 00:09:52.933
好的，现在我将复制一个提示符

00:09:53.066 --> 00:09:54.366
在这个提示中

00:09:54.366 --> 00:09:56.900
指令是执行以下操作

00:09:56.900 --> 00:09:58.800
首先总结下面的文章

00:09:58.800 --> 00:10:01.700
受限于一句话三洗

00:10:02.300 --> 00:10:04.366
第二，把摘要翻译成法语

00:10:04.533 --> 00:10:06.533
第三，在法语摘要中列出每个名字

00:10:06.533 --> 00:10:07.166
和第四

00:10:07.166 --> 00:10:09.700
输出一个包含以下内容的JSON对象

00:10:10.000 --> 00:10:11.700
法语总结和麻木的名字

00:10:11.700 --> 00:10:14.500
然后用直线把答案分开

00:10:14.500 --> 00:10:15.266
休息时间

00:10:15.266 --> 00:10:18.566
所以我们添加了文本，就像段落一样

00:10:19.300 --> 00:10:20.566
如果我们运行这个

00:10:23.900 --> 00:10:28.533
你们可以看到，我们有了摘要文本

00:10:28.533 --> 00:10:30.366
然后是法语翻译

00:10:30.600 --> 00:10:32.133
然后是名字

00:10:32.133 --> 00:10:33.933
哦，这真有趣，它给了

00:10:34.200 --> 00:10:36.666
这些名字在法语中有一个标题

00:10:36.800 --> 00:10:40.466
然后是我们请求的JSON

00:10:41.733 --> 00:10:43.933
现在我要给你们看另一个提示

00:10:44.066 --> 00:10:46.200
完成同样的任务

00:10:46.333 --> 00:10:47.466
在这个提示中

00:10:47.466 --> 00:10:49.666
我用的是一种我很喜欢的格式

00:10:50.166 --> 00:10:52.500
只是指定输出

00:10:52.733 --> 00:10:53.933
模型的结构

00:10:53.933 --> 00:10:55.933
因为正如你在这个例子中注意到的

00:10:56.000 --> 00:10:57.400
这个名字

00:10:57.666 --> 00:11:00.400
标题是法文的，我们可能不需要

00:11:00.600 --> 00:11:02.600
如果我们传递这个输出

00:11:02.600 --> 00:11:03.366
可能是

00:11:03.366 --> 00:11:05.866
有点困难，有点不可预测

00:11:05.866 --> 00:11:08.300
有时会写名字，有时会写

00:11:08.466 --> 00:11:09.900
你知道这个法国头衔

00:11:10.166 --> 00:11:11.066
在这个提示中

00:11:11.066 --> 00:11:12.866
我们在问类似的问题

00:11:13.000 --> 00:11:14.933
提示符的开头是一样的

00:11:15.133 --> 00:11:17.266
我们只是要求相同的步骤

00:11:17.400 --> 00:11:18.733
然后我们问模型

00:11:18.733 --> 00:11:20.300
使用以下格式

00:11:20.300 --> 00:11:22.866
我们已经指定了确切的格式

00:11:22.866 --> 00:11:24.800
所以文本摘要翻译

00:11:24.933 --> 00:11:26.533
名称和输出JSON

00:11:26.800 --> 00:11:30.733
然后我们开始总结这段经文

00:11:30.900 --> 00:11:33.533
或者我们甚至可以直接说文本

00:11:34.700 --> 00:11:36.700
这是和之前一样的文本

00:11:38.800 --> 00:11:39.933
我们运行一下

00:11:42.133 --> 00:11:44.700
如你所见，这是完成

00:11:44.900 --> 00:11:47.533
这个模型使用了我们要求的格式

00:11:47.600 --> 00:11:49.466
我们已经给了它文本

00:11:49.466 --> 00:11:52.300
然后它给了我们翻译的摘要

00:11:52.333 --> 00:11:54.133
名称和输出JSON

00:11:54.533 --> 00:11:55.933
这有时很好

00:11:55.933 --> 00:11:57.933
因为这样更容易通过

00:11:59.066 --> 00:12:01.466
用代码，因为它有更多

00:12:01.500 --> 00:12:04.366
你可以预测的标准化格式

00:12:05.900 --> 00:12:07.600
注意，在这种情况下

00:12:07.600 --> 00:12:09.533
我们用了尖括号

00:12:09.533 --> 00:12:10.600
作为直径

00:12:10.600 --> 00:12:12.266
而不是三重洗礼

00:12:13.366 --> 00:12:14.333
你知道你可以

00:12:14.333 --> 00:12:16.266
选择任何对您有意义的分隔符

00:12:16.266 --> 00:12:18.533
这对模型来说是有意义的

00:12:18.666 --> 00:12:21.766
我们的下一个策略是指导模型工作

00:12:21.766 --> 00:12:22.800
给出自己的解决方案

00:12:22.800 --> 00:12:24.400
在匆忙下结论之前

00:12:24.866 --> 00:12:26.000
一次又一次

00:12:26.000 --> 00:12:27.300
有时我们会得到更好的结果

00:12:27.300 --> 00:12:29.466
当我们明确地指示模型时

00:12:29.466 --> 00:12:30.866
推理出自己的解决方案

00:12:30.866 --> 00:12:32.266
在得出结论之前

00:12:32.266 --> 00:12:33.300
这是一样的

00:12:33.300 --> 00:12:34.800
我们正在讨论的想法

00:12:34.800 --> 00:12:37.600
给模型时间

00:12:37.666 --> 00:12:40.066
先把事情解决了再说

00:12:40.300 --> 00:12:41.766
答案是否正确

00:12:41.900 --> 00:12:43.400
就像人一样

00:12:43.966 --> 00:12:45.333
在这个提示中

00:12:45.333 --> 00:12:46.133
我们问的是模型

00:12:46.133 --> 00:12:48.766
判断学生的答案是否正确

00:12:48.933 --> 00:12:50.966
我们先来做一道数学题

00:12:50.966 --> 00:12:52.766
然后是学生解

00:12:52.933 --> 00:12:55.866
学生的答案实际上是错误的

00:12:55.866 --> 00:12:57.466
因为他们已经计算过了

00:12:57.466 --> 00:13:00.533
维修费用将超过10万美元

00:13:01.100 --> 00:13:02.566
100倍，但实际上

00:13:02.900 --> 00:13:04.766
这应该是10x，因为

00:13:05.266 --> 00:13:07.400
每平方英尺只要10美元

00:13:07.466 --> 00:13:09.900
其中X是绝缘的种类尺寸

00:13:09.900 --> 00:13:10.866
平方英尺

00:13:10.933 --> 00:13:12.066
就像他们定义的那样

00:13:12.066 --> 00:13:17.166
所以这应该是360x加100000，而不是450x

00:13:17.166 --> 00:13:18.400
如果我们运行这个单元格

00:13:18.533 --> 00:13:20.666
模型显示学生的解决方案是正确的

00:13:20.933 --> 00:13:23.200
如果你们通读一下学生的解

00:13:23.200 --> 00:13:24.200
实际上我只是

00:13:24.966 --> 00:13:26.666
我自己也算错了

00:13:26.666 --> 00:13:28.300
看完这篇回复

00:13:28.300 --> 00:13:29.600
因为它看起来是对的

00:13:29.600 --> 00:13:30.966
如果你读这一行

00:13:31.066 --> 00:13:32.366
这一行是正确的

00:13:33.166 --> 00:13:33.966
所以

00:13:34.000 --> 00:13:35.933
这个模型刚好符合学生的要求

00:13:35.933 --> 00:13:37.533
因为它只是略读了一下

00:13:38.800 --> 00:13:40.200
就像我刚才做的那样

00:13:40.866 --> 00:13:43.933
我们可以通过让模型工作来解决这个问题

00:13:43.933 --> 00:13:45.666
先给出自己的解

00:13:45.700 --> 00:13:48.533
然后比较它的解和学生的解

00:13:48.666 --> 00:13:50.800
让我给你们一个提示

00:13:53.566 --> 00:13:55.000
这个提示要长得多

00:13:55.400 --> 00:13:56.200
所以

00:13:56.933 --> 00:13:59.500
我们在这个提示中所做的是告诉模型

00:13:59.533 --> 00:14:00.733
你的任务是决定

00:14:00.733 --> 00:14:02.133
如果学生的答案是正确的

00:14:02.133 --> 00:14:04.566
或者不解决的问题做以下

00:14:04.566 --> 00:14:06.800
首先想出你自己解决这个问题的办法

00:14:07.266 --> 00:14:09.700
然后将你的解决方案与学生的解决方案进行比较

00:14:09.700 --> 00:14:12.400
然后评估学生的答案是否正确

00:14:12.666 --> 00:14:14.733
不要评判学生的答案是否正确

00:14:14.766 --> 00:14:16.500
直到你自己解决了这个问题

00:14:16.500 --> 00:14:17.666
或者说得很清楚

00:14:17.666 --> 00:14:20.100
一定要自己做这道题

00:14:20.400 --> 00:14:22.166
所以我们用的是一样的

00:14:22.166 --> 00:14:24.266
使用以下格式的技巧

00:14:24.300 --> 00:14:25.933
所以格式就是问题所在

00:14:26.133 --> 00:14:28.766
学生解就是实际解

00:14:29.300 --> 00:14:32.200
然后看解是否同意是或否

00:14:32.533 --> 00:14:35.366
然后学生评分正确与否

00:14:36.666 --> 00:14:39.066
所以我们有同样的问题，同样的

00:14:39.066 --> 00:14:40.300
如上所述解决方案

00:14:41.566 --> 00:14:42.866
现在如果我们运行这个单元格

00:14:48.133 --> 00:14:49.266
如你所见

00:14:49.400 --> 00:14:52.066
这个模型实际上经过了

00:14:52.900 --> 00:14:54.700
是它自己先计算的吗

00:14:55.333 --> 00:14:56.133
然后

00:14:57.100 --> 00:14:59.066
如果你知道答案是正确的

00:14:59.066 --> 00:15:04.500
是360x + 100,000不是450x + 100,000

00:15:04.666 --> 00:15:05.333
然后

00:15:05.333 --> 00:15:07.966
当被要求将其与学生的解决方案进行比较时

00:15:07.966 --> 00:15:09.400
它意识到他们不同意

00:15:09.466 --> 00:15:11.766
所以这个学生实际上是错的

00:15:12.133 --> 00:15:14.800
这是一个如何要求模型

00:15:15.333 --> 00:15:16.666
自己计算一下

00:15:16.666 --> 00:15:18.933
把任务分成几个步骤

00:15:18.933 --> 00:15:20.600
给模型更多的思考时间

00:15:20.700 --> 00:15:23.333
能帮助你得到更准确的回答吗

00:15:25.200 --> 00:15:27.666
接下来我们将讨论一些模型的局限性

00:15:27.666 --> 00:15:28.900
因为我觉得这很重要

00:15:28.900 --> 00:15:30.166
要记住这些

00:15:30.200 --> 00:15:30.766
当你善良的时候

00:15:30.766 --> 00:15:33.666
使用大型语言模型开发应用程序

00:15:34.100 --> 00:15:35.933
所以即使语言模型已经

00:15:35.933 --> 00:15:38.100
在学习期间快速接触到大量的知识

00:15:38.100 --> 00:15:39.100
培训过程

00:15:39.100 --> 00:15:39.700
事实并非如此

00:15:39.700 --> 00:15:41.866
完全记住它所看到的信息

00:15:42.133 --> 00:15:43.200
所以它不知道

00:15:43.200 --> 00:15:44.800
其知识边界很好

00:15:45.266 --> 00:15:46.933
这意味着它可能会尝试回答

00:15:46.933 --> 00:15:48.466
关于晦涩话题的问题

00:15:48.466 --> 00:15:50.266
还能编造一些听起来很有道理的东西

00:15:50.266 --> 00:15:51.533
但事实并非如此

00:15:51.666 --> 00:15:54.866
我们称这些虚构的想法为幻觉

00:15:55.700 --> 00:15:58.400
所以我要给你们看一个例子

00:15:58.400 --> 00:16:00.566
模型会产生幻觉

00:16:00.933 --> 00:16:01.800
这是一个例子

00:16:01.800 --> 00:16:04.333
模型虚构描述的地方

00:16:04.333 --> 00:16:05.700
一个编造的产品名称

00:16:05.800 --> 00:16:07.700
一家真正的牙刷公司

00:16:07.766 --> 00:16:08.933
提示符是

00:16:09.066 --> 00:16:11.866
跟我说说Aeroglide Ultraslim吧

00:16:12.000 --> 00:16:13.900
男孩的智能牙刷

00:16:15.333 --> 00:16:16.566
如果我们运行这个

00:16:16.933 --> 00:16:18.600
模型是

00:16:18.766 --> 00:16:21.300
会给我们一个很真实的声音

00:16:21.300 --> 00:16:22.933
a的描述

00:16:22.933 --> 00:16:24.966
虚拟产品

00:16:25.200 --> 00:16:26.333
原因是

00:16:26.600 --> 00:16:27.733
这可能有点危险

00:16:27.733 --> 00:16:29.900
这听起来很现实吗

00:16:30.500 --> 00:16:31.566
所以要确保

00:16:31.566 --> 00:16:33.200
运用一些技巧

00:16:33.200 --> 00:16:34.900
我们已经在这个笔记本上讲过了

00:16:34.900 --> 00:16:36.933
在建造的时候尽量避免这种情况

00:16:36.933 --> 00:16:38.466
您自己的应用程序

00:16:38.533 --> 00:16:41.100
这是模型未知的弱点

00:16:41.266 --> 00:16:44.333
这是一种积极对抗的东西

00:16:44.566 --> 00:16:47.733
还有一个减少幻觉的额外策略

00:16:48.200 --> 00:16:49.966
如果你想让模型

00:16:49.966 --> 00:16:51.933
生成答案

00:16:51.933 --> 00:16:54.766
一个文本是要求模型先来的

00:16:54.900 --> 00:16:56.933
从文章中找出任何相关的引用

00:16:56.933 --> 00:16:58.566
然后让它使用这些

00:16:58.566 --> 00:17:00.566
引用来回答问题

00:17:00.566 --> 00:17:01.800
有一种方法

00:17:01.800 --> 00:17:04.133
将答案追溯到源文档

00:17:04.166 --> 00:17:06.100
通常很有帮助

00:17:06.466 --> 00:17:09.166
来减少这些幻觉

00:17:09.700 --> 00:17:10.500
就是这样

00:17:10.700 --> 00:17:13.400
您已经完成了提示指南

00:17:13.533 --> 00:17:15.366
然后继续下一个视频

00:17:15.366 --> 00:17:16.900
是关于什么的

00:17:16.900 --> 00:17:19.933
迭代提示开发过程