WEBVTT

00:00:05.333 --> 00:00:07.066
一个大的令人兴奋的事情之一

00:00:07.066 --> 00:00:09.066
你可以用它来建立语言模型

00:00:09.066 --> 00:00:12.700
一个自定义聊天机器人，只需要少量的努力

00:00:13.066 --> 00:00:16.400
聊天GPT的web界面是一种方式，你有一个

00:00:16.466 --> 00:00:18.666
会话接口会话

00:00:18.666 --> 00:00:20.500
通过一个大的语言模型

00:00:20.700 --> 00:00:22.766
但很酷的一件事是你也可以

00:00:22.900 --> 00:00:24.500
使用大型语言模型进行构建

00:00:24.500 --> 00:00:26.400
你的自定义聊天机器人也许

00:00:26.533 --> 00:00:29.566
扮演人工智能客户服务代理或人工智能的角色

00:00:29.566 --> 00:00:31.366
餐馆的点菜员

00:00:31.733 --> 00:00:34.300
在这个视频中，你将学习如何为自己做到这一点

00:00:34.766 --> 00:00:37.933
我将描述Openai Chat的组件

00:00:37.933 --> 00:00:39.966
完成格式更详细

00:00:39.966 --> 00:00:42.566
然后你要自己造一个聊天机器人

00:00:42.800 --> 00:00:44.200
让我们开始吧

00:00:44.800 --> 00:00:45.500
首先

00:00:45.500 --> 00:00:48.600
我们将像往常一样设置Openai Python包

00:00:49.566 --> 00:00:51.366
所以像chat GBT这样的聊天模式

00:00:51.600 --> 00:00:52.300
实际上是

00:00:52.300 --> 00:00:54.566
训练接受一系列的信息作为输入

00:00:54.566 --> 00:00:57.566
并返回模型生成的消息作为输出

00:00:57.900 --> 00:00:58.933
所以尽管聊天

00:00:58.933 --> 00:01:01.366
格式的设计，使多回合的对话

00:01:01.366 --> 00:01:02.366
就像这样简单

00:01:02.366 --> 00:01:04.700
在之前的视频中我们已经知道了

00:01:05.166 --> 00:01:06.733
它也同样有用

00:01:06.733 --> 00:01:09.400
没有任何对话的单回合任务

00:01:09.766 --> 00:01:13.366
接下来我们要定义两个辅助函数

00:01:13.366 --> 00:01:14.933
这是我们一直在用的

00:01:14.933 --> 00:01:16.200
在所有的视频中

00:01:16.200 --> 00:01:19.133
它是gat补全函数

00:01:19.766 --> 00:01:21.166
但是如果你仔细看

00:01:21.200 --> 00:01:22.933
我们给一个提示，但是

00:01:22.933 --> 00:01:24.966
在函数内部我们实际在做什么

00:01:24.966 --> 00:01:26.866
把这个提示放入

00:01:26.966 --> 00:01:29.133
看起来像是某种用户消息

00:01:29.466 --> 00:01:32.066
这是因为这个话题是同性恋

00:01:32.400 --> 00:01:33.700
模型是一个聊天模型

00:01:33.700 --> 00:01:34.300
也就是说

00:01:34.300 --> 00:01:36.700
训练接受一系列的信息作为输入

00:01:36.700 --> 00:01:40.066
然后返回模型生成的消息输出

00:01:40.133 --> 00:01:41.533
用户消息是

00:01:41.533 --> 00:01:43.533
输入，然后是助理信息

00:01:43.533 --> 00:01:44.333
输出

00:01:45.566 --> 00:01:46.900
在这个视频中

00:01:46.933 --> 00:01:48.366
我们要用一个不同的

00:01:48.366 --> 00:01:49.300
helper函数

00:01:49.366 --> 00:01:50.866
而不是

00:01:50.866 --> 00:01:52.966
将单个提示符作为输入，并获得

00:01:52.966 --> 00:01:54.000
单完成

00:01:54.000 --> 00:01:54.900
我们要

00:01:54.966 --> 00:01:58.700
传入消息列表，这些消息可以

00:01:58.866 --> 00:02:00.933
从各种不同的角色

00:02:00.933 --> 00:02:02.200
我来描述一下

00:02:03.166 --> 00:02:05.700
这里有一个消息列表的例子

00:02:05.700 --> 00:02:06.766
所以第一个

00:02:06.766 --> 00:02:08.566
Message是系统消息

00:02:08.566 --> 00:02:10.766
哪一种给出了全面的指导

00:02:10.766 --> 00:02:12.566
在这条信息之后，我们有

00:02:12.566 --> 00:02:14.800
在用户和助手之间切换

00:02:15.100 --> 00:02:16.800
这还会继续下去

00:02:16.800 --> 00:02:18.566
如果你曾经使用过ChatGPT

00:02:18.700 --> 00:02:20.166
然后是网络界面

00:02:20.933 --> 00:02:22.533
您的消息是用户消息

00:02:22.533 --> 00:02:25.600
然后ChatGPT的消息是助理消息

00:02:26.133 --> 00:02:27.566
所以系统信息

00:02:27.566 --> 00:02:29.700
有助于设定行为和角色

00:02:29.700 --> 00:02:30.666
助理的

00:02:30.666 --> 00:02:30.966
而且它

00:02:30.966 --> 00:02:32.966
作为一种高级指令

00:02:32.966 --> 00:02:34.333
交谈让你可以亲切

00:02:34.333 --> 00:02:36.466
把它想象成在助理耳边低语

00:02:36.466 --> 00:02:38.600
并引导它的反应

00:02:38.600 --> 00:02:41.200
在用户不知道系统消息的情况下

00:02:41.366 --> 00:02:42.766
所以作为用户

00:02:42.933 --> 00:02:44.266
如果你用过Chart GBT

00:02:44.266 --> 00:02:46.766
你可能不知道图表GBT是什么

00:02:46.766 --> 00:02:47.533
系统消息

00:02:47.533 --> 00:02:49.866
系统消息的好处是它提供了

00:02:49.866 --> 00:02:50.866
你是开发者

00:02:50.866 --> 00:02:53.400
用一种框定对话的方式

00:02:53.400 --> 00:02:53.966
不作

00:02:53.966 --> 00:02:56.200
请求本身是对话的一部分

00:02:56.300 --> 00:02:57.366
所以你可以

00:02:57.866 --> 00:03:00.466
引导助手，在它耳边低语

00:03:00.700 --> 00:03:03.566
并在不让用户意识到的情况下引导其响应

00:03:06.133 --> 00:03:06.600
所以

00:03:06.600 --> 00:03:09.333
现在让我们试着在对话中使用这些信息

00:03:11.933 --> 00:03:13.666
我们将使用新的辅助函数

00:03:13.666 --> 00:03:15.800
从消息中获得完成

00:03:18.466 --> 00:03:21.333
我们也使用了更高的温度

00:03:22.866 --> 00:03:24.266
系统消息说

00:03:24.266 --> 00:03:26.366
你是个说话像莎士比亚的助理

00:03:26.366 --> 00:03:28.000
这是我们

00:03:28.266 --> 00:03:30.900
向助理描述它应该怎么做

00:03:30.933 --> 00:03:33.666
然后第一个用户消息告诉我一个笑话

00:03:33.700 --> 00:03:36.400
下一个问题是为什么鸡要过马路

00:03:36.533 --> 00:03:39.500
最后的用户留言是我不知道

00:03:42.533 --> 00:03:43.800
如果我们运行这个

00:03:46.533 --> 00:03:48.400
我们的反应是去另一边

00:03:48.500 --> 00:03:49.333
我们再试一次

00:03:51.600 --> 00:03:52.866
去到另一边

00:03:52.866 --> 00:03:56.933
《法萨罗夫人》是一部永远不会失败的经典名著

00:03:57.100 --> 00:03:59.166
这就是我们的莎士比亚式反应

00:04:01.366 --> 00:04:03.066
我们再来试一件事

00:04:03.200 --> 00:04:04.766
因为我想让它更清晰

00:04:04.966 --> 00:04:06.400
这是助理留言

00:04:06.400 --> 00:04:08.666
我们来打印一下

00:04:11.366 --> 00:04:13.500
整个消息响应

00:04:28.766 --> 00:04:32.066
为了更清楚一点

00:04:33.400 --> 00:04:36.100
回复是一条辅助消息

00:04:36.100 --> 00:04:37.466
所以这个角色是助理

00:04:37.466 --> 00:04:40.400
然后内容就是信息本身

00:04:40.933 --> 00:04:42.866
这就是辅助函数的作用

00:04:42.866 --> 00:04:43.666
我们只是有点

00:04:43.666 --> 00:04:45.933
传递消息的内容

00:05:00.866 --> 00:05:02.600
现在我们再做一个例子

00:05:03.066 --> 00:05:04.466
这就是我们的信息

00:05:04.566 --> 00:05:07.533
这是你的友好聊天机器人的消息

00:05:07.533 --> 00:05:10.200
第一条用户信息是嗨，我的名字是ISA

00:05:10.466 --> 00:05:11.866
我们想要

00:05:12.733 --> 00:05:14.100
获取第一条用户消息

00:05:14.100 --> 00:05:17.266
让我们对第一条助理消息执行这个

00:05:18.900 --> 00:05:20.933
第一个信息是你好，ESA

00:05:20.933 --> 00:05:21.866
很高兴认识你

00:05:21.866 --> 00:05:23.200
今天我能为您做些什么

00:05:29.733 --> 00:05:31.366
现在我们来试试另一个例子

00:05:33.733 --> 00:05:35.133
这就是我们的信息

00:05:36.466 --> 00:05:38.600
系统消息您的友好聊天机器人

00:05:38.666 --> 00:05:40.500
第一个用户消息

00:05:40.933 --> 00:05:41.733
是的

00:05:42.866 --> 00:05:45.900
你能提醒我一下我叫什么名字吗

00:05:46.300 --> 00:05:47.866
让我们得到响应

00:05:52.100 --> 00:05:53.300
如你所见

00:05:54.100 --> 00:05:56.733
模特其实不知道我的名字

00:05:58.266 --> 00:05:59.966
所以每次和

00:05:59.966 --> 00:06:02.400
语言模型是一个独立的交互

00:06:02.400 --> 00:06:03.600
这意味着你必须提供

00:06:03.600 --> 00:06:04.933
所有相关信息

00:06:04.933 --> 00:06:07.500
用于在当前对话中吸取的模型

00:06:08.166 --> 00:06:10.166
如果你想让模型从或

00:06:10.866 --> 00:06:12.933
记住之前的对话

00:06:12.933 --> 00:06:14.166
您必须提供

00:06:14.200 --> 00:06:16.266
模型输入的早期交换

00:06:16.266 --> 00:06:18.600
所以我们把它称为上下文

00:06:18.800 --> 00:06:20.900
我们来试一下

00:06:27.133 --> 00:06:28.566
现在我们已经给出了

00:06:28.566 --> 00:06:30.400
模型需要的上下文

00:06:31.100 --> 00:06:31.933
这是我的名字

00:06:31.933 --> 00:06:34.700
在前面的信息中，我们会问同样的问题

00:06:34.933 --> 00:06:36.333
所以我们会问我叫什么

00:06:38.566 --> 00:06:41.000
这个模型能够做出反应是因为它有

00:06:41.000 --> 00:06:42.666
它需要的所有上下文

00:06:43.066 --> 00:06:46.800
在我们输入的消息列表中

00:06:47.766 --> 00:06:50.100
现在您将构建自己的聊天机器人

00:06:50.966 --> 00:06:53.566
这个聊天机器人将被称为auto bot

00:06:53.933 --> 00:06:54.733
和

00:06:55.466 --> 00:06:57.800
我们将自动收集用户提示

00:06:57.800 --> 00:06:58.933
以及助手的回应

00:06:58.933 --> 00:06:59.866
为了建立

00:06:59.866 --> 00:07:00.766
这个订单

00:07:01.300 --> 00:07:03.933
它将在一家披萨店接受订单

00:07:03.933 --> 00:07:07.366
首先我们要定义这个辅助函数

00:07:07.966 --> 00:07:10.066
它所做的就是

00:07:10.066 --> 00:07:11.933
收集用户信息

00:07:12.000 --> 00:07:14.933
这样我们就可以避免手工输入了

00:07:14.933 --> 00:07:16.300
用我们上面做的方法

00:07:16.333 --> 00:07:18.466
这是一种收集

00:07:18.466 --> 00:07:21.300
将在下面构建的用户界面提示

00:07:21.533 --> 00:07:24.466
然后将它附加到一个名为context的列表

00:07:24.533 --> 00:07:27.066
然后它会用那个context调用模型

00:07:27.066 --> 00:07:29.700
时间和罗达尔反应是

00:07:29.700 --> 00:07:31.000
还添加到上下文中

00:07:31.000 --> 00:07:32.966
这是一种模型信息

00:07:33.333 --> 00:07:34.533
添加到上下文中

00:07:34.533 --> 00:07:36.500
用户消息被添加到上下文中，以此类推

00:07:36.500 --> 00:07:38.400
所以它会越来越长

00:07:39.400 --> 00:07:41.266
这样模型就有了信息

00:07:41.266 --> 00:07:43.366
它需要决定下一步该做什么

00:07:43.900 --> 00:07:46.466
现在我们设置并运行

00:07:46.466 --> 00:07:49.166
这种UI来显示audibot

00:07:49.800 --> 00:07:51.266
这就是背景

00:07:51.266 --> 00:07:52.966
它包含系统消息

00:07:52.966 --> 00:07:54.200
包含了菜单

00:07:55.200 --> 00:07:56.000
和

00:07:56.566 --> 00:07:59.100
请注意，每次调用语言模型时

00:07:59.166 --> 00:08:01.566
我们将使用相同的上下文

00:08:01.566 --> 00:08:03.466
随着时间的推移，环境正在逐渐形成

00:08:06.933 --> 00:08:09.066
然后我们来执行这个

00:08:14.600 --> 00:08:16.500
好的，我要打个招呼

00:08:16.900 --> 00:08:19.533
我想订一份披萨

00:08:24.800 --> 00:08:26.400
店员说很好

00:08:26.400 --> 00:08:27.900
你想点什么披萨

00:08:27.900 --> 00:08:30.500
我们有意大利辣香肠奶酪和茄子披萨

00:08:30.500 --> 00:08:32.466
hmm

00:08:33.500 --> 00:08:34.700
多少钱?

00:08:45.100 --> 00:08:47.100
好的，我们有价格了

00:08:48.866 --> 00:08:51.666
我想我想吃中号茄子披萨

00:09:01.900 --> 00:09:02.300
所以

00:09:02.300 --> 00:09:04.666
你可以想象我们可以继续这个话题

00:09:04.700 --> 00:09:06.866
让我们看看我们在系统中加入了什么

00:09:06.866 --> 00:09:07.666
消息

00:09:10.066 --> 00:09:11.166
所以你被订购了

00:09:11.166 --> 00:09:12.700
自动收款服务

00:09:12.700 --> 00:09:14.100
比萨店的订单

00:09:14.100 --> 00:09:15.366
你首先问候顾客

00:09:15.366 --> 00:09:16.466
然后收集订单

00:09:16.466 --> 00:09:18.600
然后问是取货还是送货

00:09:18.733 --> 00:09:20.266
你等着收整笔订单

00:09:20.266 --> 00:09:22.133
然后总结并检查期末考试

00:09:22.133 --> 00:09:24.566
如果客户想添加其他内容，则需要时间

00:09:24.666 --> 00:09:27.266
如果是快递，你可以询问地址

00:09:27.300 --> 00:09:28.866
最后你收到了付款

00:09:28.933 --> 00:09:30.600
一定要明确所有的选项

00:09:30.600 --> 00:09:33.100
额外的和尺寸，以唯一地识别项目

00:09:33.100 --> 00:09:33.900
从菜单中

00:09:34.066 --> 00:09:35.133
你的回答很简短

00:09:35.133 --> 00:09:37.066
非常友好的谈话风格

00:09:37.100 --> 00:09:40.166
菜单包括，这里是菜单

00:09:42.333 --> 00:09:44.066
让我们回到刚才的话题

00:09:44.766 --> 00:09:46.400
让我们看看助理是否

00:09:46.400 --> 00:09:48.333
一直按照指示做吗

00:09:49.066 --> 00:09:50.800
`好的，太好了，`助理问道

00:09:50.800 --> 00:09:51.966
如果我们想要配料的话

00:09:51.966 --> 00:09:54.600
是我们在系统消息中指定的吗

00:09:56.000 --> 00:09:58.500
所以我想我们不需要额外的配料

00:10:05.866 --> 00:10:08.566
当然，我们还需要点别的东西吗

00:10:08.933 --> 00:10:09.733
mmm

00:10:10.500 --> 00:10:13.100
我们喝点水吧

00:10:14.966 --> 00:10:15.766
薯条

00:10:23.000 --> 00:10:24.066
小或大

00:10:24.366 --> 00:10:26.133
这很棒，因为我们有点

00:10:26.966 --> 00:10:29.333
请系统里的助手留言给种

00:10:29.333 --> 00:10:31.266
澄清额外费用和附加费用

00:10:32.333 --> 00:10:33.133
所以

00:10:36.500 --> 00:10:37.766
这样你就明白了

00:10:37.766 --> 00:10:40.333
你可以自己玩这个

00:10:40.533 --> 00:10:41.500
你可以暂停视频

00:10:41.500 --> 00:10:42.733
然后继续运行这个

00:10:42.733 --> 00:10:44.166
在你左边的笔记本上

00:10:45.166 --> 00:10:46.066
所以

00:10:46.300 --> 00:10:49.566
现在我们可以要求模型创建一个JSON摘要

00:10:49.800 --> 00:10:51.200
我们可以把它发送到订购系统

00:10:51.200 --> 00:10:52.533
根据对话

00:10:53.333 --> 00:10:56.500
所以我们现在附加另一个系统消息

00:10:56.500 --> 00:10:57.866
这是一个指令

00:10:58.133 --> 00:11:00.600
我们说的是创建一个JSON摘要

00:11:00.600 --> 00:11:01.400
食物订单

00:11:01.466 --> 00:11:03.400
列出每件商品的价格

00:11:03.666 --> 00:11:06.800
场地面积应为1个披萨，包括配料

00:11:08.500 --> 00:11:13.200
2份配料清单3份饮料清单4份配菜清单

00:11:13.300 --> 00:11:15.000
最后是总价格

00:11:15.100 --> 00:11:16.200
你也可以

00:11:17.366 --> 00:11:19.800
在这里使用用户消息

00:11:19.800 --> 00:11:21.700
这并不一定是一个系统消息

00:11:23.533 --> 00:11:25.066
我们来执行这个

00:11:26.733 --> 00:11:29.700
注意，在这个例子中，我们用的是较低的温度

00:11:29.700 --> 00:11:31.600
因为对于这类任务

00:11:31.600 --> 00:11:33.666
我们希望输出是相当可预测的

00:11:33.700 --> 00:11:35.266
对于会话代理

00:11:35.266 --> 00:11:37.066
你可能需要用更高的温度

00:11:37.166 --> 00:11:38.200
然而在这种情况下

00:11:38.200 --> 00:11:40.100
我可能也会用更低的温度

00:11:40.100 --> 00:11:42.566
因为对于一个客户助理来说

00:11:42.966 --> 00:11:45.300
图表，但您可能希望输出为

00:11:45.366 --> 00:11:47.466
也更容易被预测

00:11:49.066 --> 00:11:51.700
这是顺序的总结

00:11:52.566 --> 00:11:54.166
所以我们可以把这个提交给

00:11:54.600 --> 00:11:56.133
如果我们想的话，可以对系统进行排序

00:11:57.400 --> 00:11:58.600
所以我们得到了它

00:11:58.600 --> 00:12:01.100
您已经构建了您的可变订单聊天机器人

00:12:01.400 --> 00:12:02.266
请随意

00:12:02.300 --> 00:12:04.266
你可以自己定制，自己玩

00:12:04.266 --> 00:12:05.766
带有系统消息

00:12:05.766 --> 00:12:07.166
改变行为

00:12:07.300 --> 00:12:08.900
聊天机器人之类的

00:12:08.900 --> 00:12:10.866
让它扮演不同的角色

00:12:10.866 --> 00:12:12.133
拥有不同的知识

