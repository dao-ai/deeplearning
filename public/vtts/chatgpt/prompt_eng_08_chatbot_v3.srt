1
00:00:05,333 --> 00:00:07,066
one of the exciting things about a large

2
00:00:07,066 --> 00:00:09,066
language model is you could use it to build

3
00:00:09,066 --> 00:00:12,700
a custom chat bot with only a modest amount of effort

4
00:00:13,066 --> 00:00:16,400
chat GPT the web interface is a way for you to have a

5
00:00:16,466 --> 00:00:18,666
conversational interface a conversation

6
00:00:18,666 --> 00:00:20,500
via a large language model

7
00:00:20,700 --> 00:00:22,766
but one of the cool things is you can also

8
00:00:22,900 --> 00:00:24,500
use a large language model to build

9
00:00:24,500 --> 00:00:26,400
your custom chatbot to maybe

10
00:00:26,533 --> 00:00:29,566
play the role of an AI customer service agent or an AI

11
00:00:29,566 --> 00:00:31,366
order taker for a restaurant

12
00:00:31,733 --> 00:00:34,300
and in this video you learn how to do that for yourself

13
00:00:34,766 --> 00:00:37,933
I'm going to describe the components of the Openai Chat

14
00:00:37,933 --> 00:00:39,966
completions format in more detail

15
00:00:39,966 --> 00:00:42,566
and then you're going to build a chatbot yourself

16
00:00:42,800 --> 00:00:44,200
so let's get into it

17
00:00:44,800 --> 00:00:45,500
so first

18
00:00:45,500 --> 00:00:48,600
we'll set up the Openai Python package as usual

19
00:00:49,566 --> 00:00:51,366
so chat models like Chat GBT

20
00:00:51,600 --> 00:00:52,300
are actually

21
00:00:52,300 --> 00:00:54,566
trained to take a series of messages as input

22
00:00:54,566 --> 00:00:57,566
and return a model generated message as output

23
00:00:57,900 --> 00:00:58,933
and so although the chat

24
00:00:58,933 --> 00:01:01,366
format is designed to make multi turn conversations

25
00:01:01,366 --> 00:01:02,366
like this easy

26
00:01:02,366 --> 00:01:04,700
we've kind of seen through the previous videos that

27
00:01:05,166 --> 00:01:06,733
it's also just as useful for

28
00:01:06,733 --> 00:01:09,400
single turn tasks without any conversation

29
00:01:09,766 --> 00:01:13,366
and so next we're going to define two helper functions

30
00:01:13,366 --> 00:01:14,933
so this is the one that we've been using

31
00:01:14,933 --> 00:01:16,200
throughout all the videos

32
00:01:16,200 --> 00:01:19,133
and it's the gat completion function

33
00:01:19,766 --> 00:01:21,166
but if you kind of look at it

34
00:01:21,200 --> 00:01:22,933
we give a prompt but then

35
00:01:22,933 --> 00:01:24,966
inside the function what we're actually doing

36
00:01:24,966 --> 00:01:26,866
is putting this prompt into

37
00:01:26,966 --> 00:01:29,133
what looks like some kind of user message

38
00:01:29,466 --> 00:01:32,066
and this is because the chat GBT

39
00:01:32,400 --> 00:01:33,700
model is a chat model

40
00:01:33,700 --> 00:01:34,300
which means it's

41
00:01:34,300 --> 00:01:36,700
trained to take a series of messages as input

42
00:01:36,700 --> 00:01:40,066
and then return a model generated messages output

43
00:01:40,133 --> 00:01:41,533
so the user message is

44
00:01:41,533 --> 00:01:43,533
the input and then the assistant messages

45
00:01:43,533 --> 00:01:44,333
the output

46
00:01:45,566 --> 00:01:46,900
so in this video

47
00:01:46,933 --> 00:01:48,366
we're going to actually use a different

48
00:01:48,366 --> 00:01:49,300
helper function

49
00:01:49,366 --> 00:01:50,866
and instead of kind of

50
00:01:50,866 --> 00:01:52,966
putting a single prompt as input and getting a

51
00:01:52,966 --> 00:01:54,000
single completion

52
00:01:54,000 --> 00:01:54,900
we're going to

53
00:01:54,966 --> 00:01:58,700
pass in a list of messages and these messages can be

54
00:01:58,866 --> 00:02:00,933
kind of from a variety of different roles

55
00:02:00,933 --> 00:02:02,200
so I'll describe those

56
00:02:03,166 --> 00:02:05,700
so here's an example of a list of messages

57
00:02:05,700 --> 00:02:06,766
and so the first

58
00:02:06,766 --> 00:02:08,566
message is a system message

59
00:02:08,566 --> 00:02:10,766
which kind of gives an overall instruction

60
00:02:10,766 --> 00:02:12,566
and then after this message we have

61
00:02:12,566 --> 00:02:14,800
turns between the user and the assistant

62
00:02:15,100 --> 00:02:16,800
and this will kind of continue to go on

63
00:02:16,800 --> 00:02:18,566
and if you've ever used ChatGPT

64
00:02:18,700 --> 00:02:20,166
the web interface then

65
00:02:20,933 --> 00:02:22,533
your messages are the user messages

66
00:02:22,533 --> 00:02:25,600
and then ChatGPT's messages are the assistant messages

67
00:02:26,133 --> 00:02:27,566
so the system message

68
00:02:27,566 --> 00:02:29,700
helps to kind of set the behavior and persona

69
00:02:29,700 --> 00:02:30,666
of the assistant

70
00:02:30,666 --> 00:02:30,966
and it

71
00:02:30,966 --> 00:02:32,966
acts as kind of a high level instruction for the

72
00:02:32,966 --> 00:02:34,333
conversation so you can kind

73
00:02:34,333 --> 00:02:36,466
of think of it as whispering in the assistant's ear

74
00:02:36,466 --> 00:02:38,600
and kind of guiding its responses

75
00:02:38,600 --> 00:02:41,200
without the user being aware of the system message

76
00:02:41,366 --> 00:02:42,766
so as the user

77
00:02:42,933 --> 00:02:44,266
if you've ever used Chart GBT

78
00:02:44,266 --> 00:02:46,766
you probably don't know what's in Chart GBT

79
00:02:46,766 --> 00:02:47,533
system message

80
00:02:47,533 --> 00:02:49,866
the benefit of the system message is that it provides

81
00:02:49,866 --> 00:02:50,866
you the developer

82
00:02:50,866 --> 00:02:53,400
with a way to kind of frame the conversation

83
00:02:53,400 --> 00:02:53,966
without making

84
00:02:53,966 --> 00:02:56,200
the request itself part of the conversation

85
00:02:56,300 --> 00:02:57,366
so you can kind of

86
00:02:57,866 --> 00:03:00,466
guide the assistant and kind of whisper in its ear

87
00:03:00,700 --> 00:03:03,566
and guide its responses without making the user aware

88
00:03:06,133 --> 00:03:06,600
so

89
00:03:06,600 --> 00:03:09,333
now let's try to use these messages in a conversation

90
00:03:11,933 --> 00:03:13,666
so we'll use our new helper function

91
00:03:13,666 --> 00:03:15,800
to get the completion from the messages

92
00:03:18,466 --> 00:03:21,333
and we are also using a higher temperature

93
00:03:22,866 --> 00:03:24,266
so the system message says

94
00:03:24,266 --> 00:03:26,366
you are an assistant that speaks like Shakespeare

95
00:03:26,366 --> 00:03:28,000
so this is us kind of

96
00:03:28,266 --> 00:03:30,900
describing to the assistant how it should behave

97
00:03:30,933 --> 00:03:33,666
and then the first user messages tell me a joke

98
00:03:33,700 --> 00:03:36,400
the next is why did the chicken cross the road

99
00:03:36,533 --> 00:03:39,500
and then the final user message is I don't know

100
00:03:42,533 --> 00:03:43,800
so if we run this

101
00:03:46,533 --> 00:03:48,400
the response is to get to the other side

102
00:03:48,500 --> 00:03:49,333
let's try again

103
00:03:51,600 --> 00:03:52,866
to get to the other side

104
00:03:52,866 --> 00:03:56,933
Fasaro Madame Tis an olden classic that never fails

105
00:03:57,100 --> 00:03:59,166
so there's our shakespearean response

106
00:04:01,366 --> 00:04:03,066
and let's actually try one more thing

107
00:04:03,200 --> 00:04:04,766
because I want to make it even clearer

108
00:04:04,966 --> 00:04:06,400
that this is the assistant message

109
00:04:06,400 --> 00:04:08,666
so here let's just go and print

110
00:04:11,366 --> 00:04:13,500
the entire message response

111
00:04:28,766 --> 00:04:32,066
so just to make this even clearer this

112
00:04:33,400 --> 00:04:36,100
response is an assistant message

113
00:04:36,100 --> 00:04:37,466
so the role is assistant

114
00:04:37,466 --> 00:04:40,400
and then the content is the message itself

115
00:04:40,933 --> 00:04:42,866
so that's what's happening in this helper function

116
00:04:42,866 --> 00:04:43,666
we're just kind of

117
00:04:43,666 --> 00:04:45,933
passing out the content of the message

118
00:05:00,866 --> 00:05:02,600
so now let's do another example

119
00:05:03,066 --> 00:05:04,466
so here our messages are

120
00:05:04,566 --> 00:05:07,533
this is the message is your friendly chatbot

121
00:05:07,533 --> 00:05:10,200
and the first user message is hi my name is ISA

122
00:05:10,466 --> 00:05:11,866
and we want to

123
00:05:12,733 --> 00:05:14,100
get the first user message

124
00:05:14,100 --> 00:05:17,266
so let's execute this for the first assistant message

125
00:05:18,900 --> 00:05:20,933
and so the first message is hello ESA

126
00:05:20,933 --> 00:05:21,866
it's nice to meet you

127
00:05:21,866 --> 00:05:23,200
how can I assist you today

128
00:05:29,733 --> 00:05:31,366
now let's try another example

129
00:05:33,733 --> 00:05:35,133
so here our messages are

130
00:05:36,466 --> 00:05:38,600
system message your friendly chatbot

131
00:05:38,666 --> 00:05:40,500
and the first user messages

132
00:05:40,933 --> 00:05:41,733
yes

133
00:05:42,866 --> 00:05:45,900
can you remind me what is my name

134
00:05:46,300 --> 00:05:47,866
and let's get the response

135
00:05:52,100 --> 00:05:53,300
and as you can see

136
00:05:54,100 --> 00:05:56,733
the model doesn't actually know my name

137
00:05:58,266 --> 00:05:59,966
so each conversation with

138
00:05:59,966 --> 00:06:02,400
a language model is a standalone interaction

139
00:06:02,400 --> 00:06:03,600
which means that you must provide

140
00:06:03,600 --> 00:06:04,933
all relevant messages

141
00:06:04,933 --> 00:06:07,500
for the model to draw from in the current conversation

142
00:06:08,166 --> 00:06:10,166
if you want the model to draw from or

143
00:06:10,866 --> 00:06:12,933
remember earlier parts of a conversation

144
00:06:12,933 --> 00:06:14,166
you must provide the

145
00:06:14,200 --> 00:06:16,266
earlier exchanges in the input to the model

146
00:06:16,266 --> 00:06:18,600
and so we'll refer to this as context

147
00:06:18,800 --> 00:06:20,900
so let's try this

148
00:06:27,133 --> 00:06:28,566
so now we've kind of given

149
00:06:28,566 --> 00:06:30,400
the context that the model needs

150
00:06:31,100 --> 00:06:31,933
which is my name

151
00:06:31,933 --> 00:06:34,700
in the previous messages we'll ask the same question

152
00:06:34,933 --> 00:06:36,333
so we'll ask what my name is

153
00:06:38,566 --> 00:06:41,000
and the model is able to respond because it has

154
00:06:41,000 --> 00:06:42,666
all of the context it needs

155
00:06:43,066 --> 00:06:46,800
in this kind of list of messages that we input to it

156
00:06:47,766 --> 00:06:50,100
so now you're going to build your own chat bot

157
00:06:50,966 --> 00:06:53,566
this chat bot is going to be called auto bot

158
00:06:53,933 --> 00:06:54,733
and

159
00:06:55,466 --> 00:06:57,800
we're going to automate the collection of user prompts

160
00:06:57,800 --> 00:06:58,933
and assistant responses

161
00:06:58,933 --> 00:06:59,866
in order to build

162
00:06:59,866 --> 00:07:00,766
this order bot

163
00:07:01,300 --> 00:07:03,933
and it's going to take orders at a pizza restaurant

164
00:07:03,933 --> 00:07:07,366
so first we're going to define this helper function

165
00:07:07,966 --> 00:07:10,066
and what this is doing is it's going to

166
00:07:10,066 --> 00:07:11,933
kind of collect our user messages

167
00:07:12,000 --> 00:07:14,933
so we can avoid typing them in by hand in the same

168
00:07:14,933 --> 00:07:16,300
in the way that we did above

169
00:07:16,333 --> 00:07:18,466
and this is going to kind of collect

170
00:07:18,466 --> 00:07:21,300
prompts from a user interface that will build below

171
00:07:21,533 --> 00:07:24,466
and then append it to a list called context

172
00:07:24,533 --> 00:07:27,066
and then it will call the model with that context every

173
00:07:27,066 --> 00:07:29,700
time and the Rodal response is then

174
00:07:29,700 --> 00:07:31,000
also added to the context

175
00:07:31,000 --> 00:07:32,966
so the kind of model message

176
00:07:33,333 --> 00:07:34,533
is added to the context

177
00:07:34,533 --> 00:07:36,500
the user message is added to the context so on

178
00:07:36,500 --> 00:07:38,400
so it just kind of grows longer and longer

179
00:07:39,400 --> 00:07:41,266
this way the model has the information

180
00:07:41,266 --> 00:07:43,366
it needs to determine what to do next

181
00:07:43,900 --> 00:07:46,466
and so now we'll set up and run

182
00:07:46,466 --> 00:07:49,166
this kind of UI to display the audibot

183
00:07:49,800 --> 00:07:51,266
and so here's the context

184
00:07:51,266 --> 00:07:52,966
and it contains the system message

185
00:07:52,966 --> 00:07:54,200
that contains the menu

186
00:07:55,200 --> 00:07:56,000
and

187
00:07:56,566 --> 00:07:59,100
note that every time we call the language model

188
00:07:59,166 --> 00:08:01,566
we're going to use the same context and

189
00:08:01,566 --> 00:08:03,466
the context is building up over time

190
00:08:06,933 --> 00:08:09,066
and then let's execute this

191
00:08:14,600 --> 00:08:16,500
okay I'm going to say hi

192
00:08:16,900 --> 00:08:19,533
I would like to order a pizza

193
00:08:24,800 --> 00:08:26,400
and the assistant says great

194
00:08:26,400 --> 00:08:27,900
what pizza would you like to order

195
00:08:27,900 --> 00:08:30,500
we have pepperoni cheese and eggplant pizza

196
00:08:30,500 --> 00:08:32,466
hmm

197
00:08:33,500 --> 00:08:34,700
how much are they

198
00:08:45,100 --> 00:08:47,100
great okay we have the prices

199
00:08:48,866 --> 00:08:51,666
I think I'm feeling a medium eggplant pizza

200
00:09:01,900 --> 00:09:02,300
so

201
00:09:02,300 --> 00:09:04,666
as you can imagine we could continue this conversation

202
00:09:04,700 --> 00:09:06,866
and let's kind of look at what we've put in the system

203
00:09:06,866 --> 00:09:07,666
message

204
00:09:10,066 --> 00:09:11,166
so you are order bought

205
00:09:11,166 --> 00:09:12,700
an automated service to collect

206
00:09:12,700 --> 00:09:14,100
orders for a pizza restaurant

207
00:09:14,100 --> 00:09:15,366
you first greet the customer

208
00:09:15,366 --> 00:09:16,466
then collect the order

209
00:09:16,466 --> 00:09:18,600
and then ask if it's a pickup or delivery

210
00:09:18,733 --> 00:09:20,266
you wait to collect the entire order

211
00:09:20,266 --> 00:09:22,133
then summarize it and check for a final

212
00:09:22,133 --> 00:09:24,566
time if the customer wants to add anything else

213
00:09:24,666 --> 00:09:27,266
if it's a delivery you can ask for an address

214
00:09:27,300 --> 00:09:28,866
finally you collect the payment

215
00:09:28,933 --> 00:09:30,600
make sure to clarify all options

216
00:09:30,600 --> 00:09:33,100
extras and sizes to uniquely identify the item

217
00:09:33,100 --> 00:09:33,900
from the menu

218
00:09:34,066 --> 00:09:35,133
you respond in a short

219
00:09:35,133 --> 00:09:37,066
very conversational friendly style

220
00:09:37,100 --> 00:09:40,166
the menu includes and then here we have the menu

221
00:09:42,333 --> 00:09:44,066
so let's go back to our conversation

222
00:09:44,766 --> 00:09:46,400
and let's see if the assistant kind of

223
00:09:46,400 --> 00:09:48,333
has been following the instructions

224
00:09:49,066 --> 00:09:50,800
okay great the assistant asks

225
00:09:50,800 --> 00:09:51,966
if we want any toppings

226
00:09:51,966 --> 00:09:54,600
which we kind of specified in the system message

227
00:09:56,000 --> 00:09:58,500
so I think we want no extra toppings

228
00:10:05,866 --> 00:10:08,566
sure thing is there anything else we'd like to order

229
00:10:08,933 --> 00:10:09,733
mmm

230
00:10:10,500 --> 00:10:13,100
let's get some water actually

231
00:10:14,966 --> 00:10:15,766
fries

232
00:10:23,000 --> 00:10:24,066
small or large

233
00:10:24,366 --> 00:10:26,133
and this is great because we kind of

234
00:10:26,966 --> 00:10:29,333
ask the assistant in the system message to kind of

235
00:10:29,333 --> 00:10:31,266
clarify extras and sides

236
00:10:32,333 --> 00:10:33,133
so

237
00:10:36,500 --> 00:10:37,766
and so you get the idea

238
00:10:37,766 --> 00:10:40,333
and please feel free to play with this yourself

239
00:10:40,533 --> 00:10:41,500
you can pause the video

240
00:10:41,500 --> 00:10:42,733
and just go ahead and run this

241
00:10:42,733 --> 00:10:44,166
in your own notebook on the left

242
00:10:45,166 --> 00:10:46,066
and so

243
00:10:46,300 --> 00:10:49,566
now we can ask the model to create a JSON summary

244
00:10:49,800 --> 00:10:51,200
that we could send to the order system

245
00:10:51,200 --> 00:10:52,533
based on the conversation

246
00:10:53,333 --> 00:10:56,500
so we're now appending another system message

247
00:10:56,500 --> 00:10:57,866
which is an instruction

248
00:10:58,133 --> 00:11:00,600
and we're saying create a JSON summary of the previous

249
00:11:00,600 --> 00:11:01,400
food order

250
00:11:01,466 --> 00:11:03,400
itemize the price for each item

251
00:11:03,666 --> 00:11:06,800
the field should be 1 pizza include side

252
00:11:08,500 --> 00:11:13,200
2 list of toppings 3 list of drinks and 4 list of sides

253
00:11:13,300 --> 00:11:15,000
and finally the total price

254
00:11:15,100 --> 00:11:16,200
and you could also

255
00:11:17,366 --> 00:11:19,800
use a user message here

256
00:11:19,800 --> 00:11:21,700
this does not have to be a system message

257
00:11:23,533 --> 00:11:25,066
so let's execute this

258
00:11:26,733 --> 00:11:29,700
and notice in this case we're using a lower temperature

259
00:11:29,700 --> 00:11:31,600
because for these kinds of tasks

260
00:11:31,600 --> 00:11:33,666
we want the output to be fairly predictable

261
00:11:33,700 --> 00:11:35,266
for a conversational agent

262
00:11:35,266 --> 00:11:37,066
you might want to use a higher temperature

263
00:11:37,166 --> 00:11:38,200
however in this case

264
00:11:38,200 --> 00:11:40,100
I would maybe use a lower temperature as well

265
00:11:40,100 --> 00:11:42,566
because for a customer assistant

266
00:11:42,966 --> 00:11:45,300
chart but you might want the output to be

267
00:11:45,366 --> 00:11:47,466
to be a bit more predictable as well

268
00:11:49,066 --> 00:11:51,700
and so here we have the summary of our order

269
00:11:52,566 --> 00:11:54,166
and so we could submit this to the

270
00:11:54,600 --> 00:11:56,133
order system if we wanted to

271
00:11:57,400 --> 00:11:58,600
so there we have it

272
00:11:58,600 --> 00:12:01,100
you've built your variage order chatbot

273
00:12:01,400 --> 00:12:02,266
feel free to

274
00:12:02,300 --> 00:12:04,266
kind of customize it yourself and play around

275
00:12:04,266 --> 00:12:05,766
with the system message

276
00:12:05,766 --> 00:12:07,166
to change the behavior

277
00:12:07,300 --> 00:12:08,900
of the chatbot and kind of

278
00:12:08,900 --> 00:12:10,866
get it to act as different personas

279
00:12:10,866 --> 00:12:12,133
with different knowledge

